openapi: 3.0.0
info:
  title: "RP Flask REST API"
  description: "An API about fruits, people and notes"
  version: "1.0.0"

servers:
  - url: "/api"

components:
  schemas:

    Fruit:
      type: "object"
      required:
        - name
      properties:
        name:
          type: "string"
        weight:
          type: "number"
        description:
          type: "string"
        image_name:
          type: "string"

    Person:
      type: "object"
      required:
        - lname
      properties:
        fname:
          type: "string"
        lname:
          type: "string"
  parameters:
    fruit_id:
      name: "fruit_id"
      description: "ID of the fruit to get"
      in: path
      required: True
      schema:
        type: "string"
    person_id:
      name: "person_id"
      description: "ID of the person to get"
      in: path
      required: True
      schema:
        type: "string"
    note_id:
      name: "note_id"
      description: "ID of the note"
      in: path
      required: True
      schema:
        type: "string"

paths:
  /fruits:
    get:
      operationId: "fruits.read_all"
      tags:
        - "Fruits"
      summary: "Read the list of fruits"
      responses:
        "200":
          description: "Successfully read fruits list"
    post:
      operationId: "fruits.create"
      tags:
        - Fruits
      summary: "Create a fruit"
      requestBody:
        x-body-name: "fruit"
        description: "Fruit to create"
        required: True
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Fruit"
      responses:
        "201":
          description: "Successfully created fruit"
  /fruits/{fruit_id}:
    get:
      operationId: "fruits.read_one"
      tags:
        - Fruits 
      summary: "Read one fruit"
      parameters:
        - $ref: "#/components/parameters/fruit_id"
      responses:
        "200":
          description: "Successfully read fruit"
    put:
      tags:
        - Fruits 
      operationId: "fruits.update"
      summary: "Update a fruit"
      parameters:
        - $ref: "#/components/parameters/fruit_id"
      responses:
        "200":
          description: "Successfully updated fruit"
      requestBody:
        x-body-name: "fruit"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Fruit"
    delete:
      tags:
        - Fruits
      operationId: "fruits.delete"
      summary: "Delete a fruit"
      parameters:
        - $ref: "#/components/parameters/fruit_id"
      responses:
        "204":
          description: "Successfully deleted fruit"

  /people:
    get:
      operationId: "people.read_all"
      tags:
        - "People"
      summary: "Read the list of people"
      responses:
        "200":
          description: "Successfully read people list"
    post:
      operationId: "people.create"
      tags:
        - People
      summary: "Create a person"
      requestBody:
        x-body-name: "person"
        description: "Person to create"
        required: True
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Person"
      responses:
        "201":
          description: "Successfully created person"
  /people/{person_id}:
    get:
      operationId: "people.read_one"
      tags:
        - People
      summary: "Read one person"
      parameters:
        - $ref: "#/components/parameters/person_id"
      responses:
        "200":
          description: "Successfully read person"
    put:
      tags:
        - People
      operationId: "people.update"
      summary: "Update a person"
      parameters:
        - $ref: "#/components/parameters/person_id"
      responses:
        "200":
          description: "Successfully updated person"
      requestBody:
        x-body-name: "person"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Person"
    delete:
      tags:
        - People
      operationId: "people.delete"
      summary: "Delete a person"
      parameters:
        - $ref: "#/components/parameters/person_id"
      responses:
        "204":
          description: "Successfully deleted person"
  /notes:
    post:
      operationId: "notes.create"
      tags:
        - Notes
      summary: "Create a note associated with a person"
      requestBody:
        x-body-name: "note"
        description: "Note to create"
        required: True
        content:
          application/json:
            schema:
              type: "object"
              properties:
                person_id:
                  type: "string"
                content:
                  type: "string"
      responses:
        "201":
          description: "Successfully created a note"
  /notes/{note_id}:
    get:
      operationId: "notes.read_one"
      tags:
        - Notes
      summary: "Read one note"
      parameters:
        - $ref: "#/components/parameters/note_id"
      responses:
        "200":
          description: "Successfully read one note"
    put:
      tags:
        - Notes
      operationId: "notes.update"
      summary: "Update a note"
      parameters:
        - $ref: "#/components/parameters/note_id"
      responses:
        "200":
          description: "Successfully updated note"
      requestBody:
        x-body-name: "note"
        content:
          application/json:
            schema:
              type: "object"
              properties:
                content:
                  type: "string"
    delete:
      tags:
        - Notes
      operationId: "notes.delete"
      summary: "Delete a note"
      parameters:
        - $ref: "#/components/parameters/note_id"
      responses:
        "204":
          description: "Successfully deleted note"
